Running on jobs-site.test 
    -> make sure apache is running (XAMPP)
    -> vendor directory was not autogenerated with laravel project, had to run "Composer update" in project root


Views
    -> views are blade documents that are stored in views director that is in resources directory

Routing
    -> Route static function takes in an endpoint, and a call back that returns a view 
    Route::get('/', function () {
        return view('welcome');
    });

    // example page
    Route::get('/hello', function() {
        return 'Hello World';
    });

    // example with a response, you can set headers with this
    Route::get('/hello2', function() {
        return response('<h1>Hello World</h1>', 200)
            ->header('Content-Type', 'text/plain')
            ->header('foo', 'bar');
    });

    // example with wildcard 
    Route::get('/posts/{id}', function($id) {
        return response('Id ' . $id);
    });

    // constraint on what you can pass in the url
    Route::get('/number/{number}', function($number) {

        // tells you whats passed in
        // dd($number);

        // tells you whats passed in with debug ingo
        // ddd($number);

        return response('Number ' . $number);
    })->where('number', '[0-9]+');

    // example of api route (we are responding with json) -> Have to prefix url with /api so www.name/api/posts
    Route::get('/posts', function() {
        return response()->json([
            'posts' => [
                [
                    'title' => 'post1'
                ]
            ]
        ]);
    });

    Blade Pages
        -> Are like JSX
        -> Can use {{ }} to output a variable 
        -> Has directives like @if @foreach @unless and @php to create code blocks within the html 

    Models
        -> This is where you retrieve stuff from the db to pass into your page
        -> Normally use Eloquent for this (automatically maps db results to object)
        -> Give file a namespace and 'use' that namespace in the web.php router file to access the Models
        -> To make a model run -> php artisan make:model "name"

    MySQL
        -> This is the default db for laravel
        -> Need to set db name, username, and password in the .env file in root folder

    Migrations
        -> this is the magic that creates tables/drops tables in MySQL
        -> terminal command to create a migration -> php artisan make:migration "name" 
            -> this will auto insert a new migration class in the migrations folder 
        -> to actually have the migration run and work on the connected db, run -> php artisan migrate

    Seeders
        -> a way to fill the db with test data, calls a factory method defined in factories to insert dummy data 
        -> to run the seeding run -> php artisan db:seed 
        -> to clear the seeding run -> php artisan migrate:refresh
        -> to clear the seeding (delete data from db) AND do new seed run -> php artisan migrate:refresh --seed

    Factory 
        -> to make a new factor run -> php artisan make:factory "name" 

    Controller
        -> This handles the flow of data from db to view 
        -> Can make a controller by running -> php artisan make:controller "name" -> will be in app/http/controllers

    Clockwork Extension
        -> chrome extension that shows a bunch of the fetch requests info 
        -> need to composer install it -> composer require itsgoingd/clockwork